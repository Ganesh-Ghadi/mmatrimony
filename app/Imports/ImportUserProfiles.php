<?php
namespace App\Imports;

use App\Models\User;
use App\Models\Profile;
use App\Models\Package;
use App\Models\ProfilePackage;
use Illuminate\Support\Facades\Hash;
use Maatwebsite\Excel\Concerns\ToModel;
use Maatwebsite\Excel\Concerns\WithHeadingRow;
use Maatwebsite\Excel\Concerns\WithValidation;
use Maatwebsite\Excel\Concerns\WithBatchInserts;
use Maatwebsite\Excel\Concerns\WithChunkReading;
use Carbon\Carbon;

class ImportUserProfiles implements ToModel, WithHeadingRow, WithValidation, WithBatchInserts, WithChunkReading
{
    /**
     * Define the fields that you want to import.
     */
    public function rules(): array
    {
        return [
            'first_name'  => 'required|string|max:100',
            'middle_name' => 'nullable|string|max:100',
            'last_name'   => 'required|string|max:100',
            'mobile'      => 'nullable|max:20',
            'email'       => 'required|email|max:100|unique:users,email',
            'password'    => 'required|string|min:6',
        ];
    }
    
    /**
     * Create a new User instance using only the specified fields.
     * The default role is set to "member", the active column is set to 1,
     * the name column is generated by concatenating first_name, middle_name, and last_name,
     * and the first package from the packages table is applied to the created profile,
     * including its tokens, start date, and expiration date.
     */
    public function model(array $row)
    {
        // Explicitly cast mobile to a string if present
        $mobile = isset($row['mobile']) ? (string) $row['mobile'] : null;
        
        // Combine first_name, middle_name, and last_name to form the full name.
        $fullName = trim($row['first_name'] . ' ' . ($row['middle_name'] ?? '') . ' ' . $row['last_name']);
        
        // Create the user with active status set to 1.
        $user = new User([
            'name'        => $fullName,
            'first_name'  => $row['first_name'],
            'middle_name' => $row['middle_name'] ?? null,
            'last_name'   => $row['last_name'],
            'mobile'      => $mobile,
            'email'       => $row['email'],
            'password'    => Hash::make($row['password']),
            'active'      => 1,
        ]);
        $user->save();
        $user->assignRole('member');
        
        // Create the profile and capture the created instance.
        $profileData = [
            'user_id'     => $user->id,
            'first_name'  => $row['first_name'],
            'middle_name' => $row['middle_name'] ?? null,
            'last_name'   => $row['last_name'],
            'email'       => $row['email'],
            'mobile'      => $mobile,
        ];
        $profile = Profile::create($profileData);
        
        // Retrieve the first package from the packages table.
        $package = Package::first();
        if ($package) {
            // Get the tokens received from the package (assumes package model has a tokens attribute).
            $tokens_received = $package->tokens;
            // The start date is the current time.
            $starts_at = Carbon::now();
            // The expires_at is calculated based on the package validity (in days). Defaults to 30 days if not set.
            $expires_at = $starts_at->copy()->addDays($package->validity ?? 30);
            
            // Create the profile-package association with tokens, starts_at, and expires_at.
            ProfilePackage::create([
                'profile_id'      => $profile->id,
                'package_id'      => $package->id,
                'tokens_received' => $tokens_received,
                'starts_at'       => $starts_at,
                'expires_at'      => $expires_at,
            ]);
            
            // Update the profile's available_tokens by adding the tokens_received.
            $profile->available_tokens = (($profile->available_tokens) ? $profile->available_tokens : 0) + $tokens_received;
            $profile->save();
        }
        
        // Return null to prevent Laravel Excel from saving the model again.
        return null;
    }
    
    public function batchSize(): int
    {
        return 500;
    }
    
    public function chunkSize(): int
    {
        return 500;
    }
}